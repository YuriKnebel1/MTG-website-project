// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  cards         UserCard[]
  decks         Deck[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id                String     @id
  name              String
  manaCost          String?
  cmc               Float
  colors            String?
  colorIdentity     String?
  type              String
  types             String?
  subtypes          String?
  rarity            String
  set               String
  setName           String
  text              String?
  power             String?
  toughness         String?
  loyalty           String?
  imageUrl          String?
  imageUris         String?   // JSON string para múltiplas imagens
  prices            String?   // JSON string para preços
  legalities        String?   // JSON string para legalidades
  userCards         UserCard[]
  deckCards         DeckCard[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model UserCard {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  quantity  Int      @default(1)
  condition String   @default("NM") // Near Mint, Lightly Played, Moderately Played, Heavily Played, Damaged
  foil      Boolean  @default(false)
  language  String   @default("pt")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cardId, condition, foil, language])
}

model Deck {
  id          String     @id @default(cuid())
  name        String
  description String?
  format      String     @default("Standard") // Standard, Modern, Legacy, Commander, etc.
  colors      String?    // Cores do deck
  userId      String
  isPublic    Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       DeckCard[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model DeckCard {
  id       String  @id @default(cuid())
  deckId   String
  cardId   String
  quantity Int     @default(1)
  category String  @default("main") // main, sideboard, commander
  deck     Deck    @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card     Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([deckId, cardId, category])
}

model PriceHistory {
  id        String   @id @default(cuid())
  cardId    String
  price     Float
  source    String   // Scryfall, TCGPlayer, etc.
  condition String   @default("NM")
  foil      Boolean  @default(false)
  currency  String   @default("BRL")
  createdAt DateTime @default(now())

  @@index([cardId, createdAt])
}

model MetaDeck {
  id          String   @id @default(cuid())
  name        String
  format      String
  archetype   String
  winrate     Float?
  playrate    Float?
  source      String   // MTGGoldfish, EDHRec, etc.
  decklist    String   // JSON string com a lista de cartas
  colors      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([format, winrate])
}
